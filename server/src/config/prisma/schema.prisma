generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator pothos {
  provider = "prisma-pothos-types"
}

model Restaurant {
  id Int @id @default(autoincrement())
  name String @unique
  rating Float
  price PricesOnRestaurant[]
  photos String[]
  latitude Float
  longitude Float
  hours RestaurantHours[]
  location RestaurantLocation[]
  display_phone String?
  category CategoriesOnRestaurants[]

  users UsersLikedRestaurants[]
  @@map("restaurants")
}

model Bar {
  id Int @id @default(autoincrement())
  name String @unique
  rating Float
  price PricesOnBar[]
  photos String[]
  latitude Float
  longitude Float
  hours BarHours[]
  location BarLocation[]
  display_phone String?
  category CategoriesOnBars[]

  users UsersLikedBars[]
  @@map("bars")
}

model Price {
  id Int @id @default(autoincrement())
  price String @unique
  restaurants PricesOnRestaurant[]
  bar PricesOnBar[]
  @@map("price")
}


model PricesOnRestaurant {
  restaurant Restaurant @relation(fields: [restaurantName], references: [name])
  restaurantName String
  price Price @relation(fields: [priceStr], references: [price])
  priceStr String
  @@id([restaurantName, priceStr])
  @@map("restaurant_price")
}

model PricesOnBar {
  bar Bar @relation(fields: [barName], references: [name])
  barName String
  price Price @relation(fields: [priceStr], references: [price])
  priceStr String
  @@id([barName, priceStr])
  @@map("bar_price")
}

model RestaurantHours {
  id Int @id @default(autoincrement())
  start String
  end String
  day Int
  restaurant Restaurant @relation(fields: [restaurantName], references: [name])
  restaurantName String

  @@map("restaurant_hours")
}

model BarHours {
  id Int @id @default(autoincrement())
  start String
  end String
  day Int
  bar Bar @relation(fields: [barName], references: [name])
  barName String

  @@map("bar_hours")
}

model Location {
  id Int @id @default(autoincrement())
  address String @unique
  city String
  state String
  restaurants RestaurantLocation[]
  bars BarLocation[]

  @@map("location")
}

model RestaurantLocation {
  restaurant Restaurant @relation(fields: [restaurantName], references: [name])
  restaurantName String
  location Location @relation(fields: [locationAddress], references: [address])
  locationAddress String
  @@id([restaurantName, locationAddress])
  @@map("restaurant_location")
}

model BarLocation {
  bar Bar @relation(fields: [barName], references: [name])
  barName String
  location Location @relation(fields: [locationAddress], references: [address])
  locationAddress String
  @@id([barName, locationAddress])

  @@map("bar_location")
}

model Category {
  id Int @id @default(autoincrement())
  title String @unique
  alias String @unique
  restaurants CategoriesOnRestaurants[]
  bars CategoriesOnBars[]

  @@map("category")
}

model CategoriesOnRestaurants {
  restaurant Restaurant @relation(fields: [restaurantName], references: [name])
  restaurantName String
  category Category @relation(fields: [categoryAlias], references: [alias])
  categoryAlias String
  @@id([restaurantName, categoryAlias])

  @@map("categories_restaurants")
}

model CategoriesOnBars {
  bar Bar @relation(fields: [barName], references: [name])
  barName String
  category Category @relation(fields: [categoryAlias], references: [alias])
  categoryAlias String
  @@id([barName, categoryAlias])

  @@map("categories_bars")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  password String
  createdAt DateTime @default(now())
  role Role

  

  userProfile UserProfile?
  usersLikedRestaurants UsersLikedRestaurants[]
  usersLikedBars UsersLikedBars[]

  tokens Token[]

  @@map("user")
}

model UserProfile {
  id Int @id @default(autoincrement())
  userName String @unique
  firstName String
  lastName String
  imgUrl String?
  user User @relation(fields: [userId], references: [id])
  userId Int @unique

  @@map("user_profile")

}

model UsersLikedRestaurants {
  restaurant Restaurant @relation(fields: [restaurantName], references: [name])
  restaurantName String
  user User @relation(fields: [userId], references: [id])
  userId Int
  @@id([restaurantName, userId])

  @@map("users_liked_restaurants")

}
model UsersLikedBars {
  bar Bar @relation(fields: [barName], references: [name])
  barName String
  user User @relation(fields: [userId], references: [id])
  userId Int
  @@id([barName, userId])

  @@map("users_liked_bars")

}

enum Role {
  USER
  ADMIN
}

model Token {
 id         Int       @id @default(autoincrement())
 createdAt  DateTime  @default(now())
 updatedAt  DateTime  @updatedAt
 type       TokenType
 valid      Boolean   @default(true)
 expiration DateTime

 // Relation fields
 user   User @relation(fields: [userId], references: [id])
 userId Int

 @@map("token")
}




enum TokenType {
 API
}